#include <unistd.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <linux/fb.h>
#include <sys/mman.h>

struct pixel {              // EFM32GG uses 16-bit RGB565 format for each pixel. Raspberry Pi does that too!
    unsigned int blue  : 5; // flipped because little-endian machine.
    unsigned int green : 6;
    unsigned int red   : 5;
};

int      framebuffer_file_descriptor = 0;
struct   fb_var_screeninfo var_info;
char*    framebuffer_ptr             = NULL;
long int screen_size                 = 0;

int initialize_renderer()
{
    struct fb_fix_screeninfo fix_info;

    // Open framebuffer file fb0.
    framebuffer_file_descriptor = open("/dev/fb0", O_RDWR);
    if (framebuffer_file_descriptor == -1) {
        printf("Error: cannot open framebuffer device.\n");
        return -1;
    }
    printf("The framebuffer device file has been successfully opened.\n");

    // Get fixed screen information.
    if (ioctl(framebuffer_file_descriptor, FBIOGET_FSCREENINFO, &fix_info)) {
        close(framebuffer_file_descriptor);
        printf("Error: Failed to read fixed screen information.\n");
        return -1;
    }

    // Get variable screen information.
    if (ioctl(framebuffer_file_descriptor, FBIOGET_VSCREENINFO, &var_info)) {
        close(framebuffer_file_descriptor);
        printf("Error: Failed to read variable screen information.\n");
        return -1;
    }
    printf("Display info %dx%d, %d bpp\n",
            var_info.xres, var_info.yres,
            var_info.bits_per_pixel);

    screen_size = fix_info.smem_len;

    // Map framebuffer to user memory.
    framebuffer_ptr = (char*)mmap(0, screen_size, PROT_READ | PROT_WRITE, MAP_SHARED, framebuffer_file_descriptor, 0);

    if ((int)framebuffer_file_descriptor == -1) {
        printf("Error: Failed to mmap framebuffer.\n");
        return -1;
    }


    return 0;
}

// BUG IN THE DEVICE: A black dot to the left is not drawn.
// Update a rectangle of width and height at position x,y on screen.
void update_screen(int x, int y, int width, int height)
{
    struct fb_copyarea rectangle;

    rectangle.dx     = x;
    rectangle.dy     = y;
    rectangle.width  = width;
    rectangle.height = height;

    ioctl(framebuffer_file_descriptor, 0x4680, &rectangle);
}

void deinitialize_renderer()
{
    // Free resources.
    munmap(framebuffer_ptr, screen_size);
    close(framebuffer_file_descriptor);
}

void draw_pixel_at_position(int x, int y, unsigned int red, unsigned int green, unsigned int blue)
{
    ((struct pixel*)(framebuffer_ptr + (y * (var_info.xres * var_info.bits_per_pixel / 8)) + (x * (var_info.bits_per_pixel / 8))))->red   = red;
    ((struct pixel*)(framebuffer_ptr + (y * (var_info.xres * var_info.bits_per_pixel / 8)) + (x * (var_info.bits_per_pixel / 8))))->green = green;
    ((struct pixel*)(framebuffer_ptr + (y * (var_info.xres * var_info.bits_per_pixel / 8)) + (x * (var_info.bits_per_pixel / 8))))->blue  = blue;
}

void fill_screen_with_color(unsigned red, unsigned int green, unsigned int blue) 
{
    for (int index = 0; index < screen_size; index += (var_info.bits_per_pixel / 8)) {
        ((struct pixel*)(framebuffer_ptr + index))->red   = red;
        ((struct pixel*)(framebuffer_ptr + index))->green = green;
        ((struct pixel*)(framebuffer_ptr + index))->blue  = blue;
    }
}

int main(int argc, char* argv[])
{
	/*
    int gamepad_fd = open("/dev/gamepad", "r");
    if (gamepad_fd == -1) {
        printf("Error: Failed to open gamepad device file. Remember to modprobe driver-gamepad");
        return -1;
    }*/


    if (initialize_renderer() == -1) {
        return -1;
    }

    // Red: 31. Grønn: 63, Blå: 31.
    fill_screen_with_color(31, 0, 0);
    update_screen(0, 0, var_info.xres, var_info.yres);
    fill_screen_with_color(0, 63, 0);
    update_screen(0, 0, var_info.xres, var_info.yres);
    fill_screen_with_color(0, 0, 31);
    update_screen(0, 0, var_info.xres, var_info.yres);
    for (int j = 0; j < 240; j++) {
        for (int i = 0; i < 320; i++) {
            draw_pixel_at_position(i, j, (j % 32), 31, (i+j % 32));
        }

	    update_screen(0, j, 320, 1);

    }
	
        for (int j = 0; j < 240; j++) {
            for (int i = 0; i < 240; i++) {
		if (i == j){
		   draw_pixel_at_position(i, j, 20, 31, 20);
		}
             }
	    update_screen(0, j, 240, 1);
        }

    

    //update_screen(0, 0, 100, 100);

    deinitialize_renderer();

    return EXIT_SUCCESS;
}
